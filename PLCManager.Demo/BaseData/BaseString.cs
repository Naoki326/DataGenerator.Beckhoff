using System;using System.Collections.Generic;using System.Text;using System.Threading;using System.Threading.Tasks;namespace PlcCore.Data{    public abstract class BaseString : BaseData, IBaseString    {        public BaseString(GetDataDel getDataDel)        {            getData = getDataDel;        }        public delegate ref string GetDataDel();        protected GetDataDel getData;        public string Data        {            get { return getData(); }        }        public int Length => getData().Length;        public override IEnumerable<IBaseData> Children => [];        public override IBaseData Get(string name) { throw new KeyNotFoundException(name); }        public override void Refresh(int timeout = -1, CancellationToken token = default)        {            TryGet(out _);        }        public virtual Task<string> GetAsync(int timeout = -1, CancellationToken token = default)        {            return Task.FromResult(Data);        }        public virtual Task SetAsync(string value, int timeout = -1, CancellationToken token = default)        {            return Task.CompletedTask;        }        public abstract IDisposable Subscribe(IObserver<string> observer);        public virtual string Get(int timeout = -1, CancellationToken token = default)        {            return GetAsync(timeout, token).Result;        }        public bool TryGet(out string value, int timeout = -1, CancellationToken token = default)        {            try            {                value = Get(timeout, token);                return true;            }            catch (Exception)            {                value = default;                return false;            }        }        public virtual void Set(string value, int timeout = -1, CancellationToken token = default)        {            SetAsync(value, timeout, token).Wait();        }        public bool TrySet(string value, int timeout = -1, CancellationToken token = default)        {            try            {                Set(value, timeout, token);                return true;            }            catch (Exception)            {                return false;            }        }        public async Task<BaseResult<string>> TryGetAsync(int timeout = -1, CancellationToken token = default)        {            try            {                string result = await GetAsync(timeout, token);                return BaseResult<string>.Success(result);            }            catch (Exception)            {                return BaseResult<string>.Failure();            }        }        public async Task<bool> TrySetAsync(string value, int timeout = -1, CancellationToken token = default)        {            try            {                await SetAsync(value, timeout, token);                return true;            }            catch (Exception)            {                return false;            }        }    }    public abstract class BaseString<TS> : BaseData, IBaseString where TS : IPLCStructArray<byte>    {        public BaseString(GetDataDel getDataDel)        {            getData = getDataDel;        }        public delegate ref TS GetDataDel();        protected GetDataDel getData;        public string Data => getData().ToString();        public int Length => getData().Length;        public override IEnumerable<IBaseData> Children => [];        public override IBaseData Get(string name) { throw new KeyNotFoundException(name); }        public override void Refresh(int timeout = -1, CancellationToken token = default)        {            TryGet(out _);        }        public virtual Task<string> GetAsync(int timeout = -1, CancellationToken token = default)        {            throw new NotSupportedException();        }        public virtual Task SetAsync(string value, int timeout = -1, CancellationToken token = default)        {            return Task.CompletedTask;        }        public abstract IDisposable Subscribe(IObserver<string> observer);        public virtual string Get(int timeout = -1, CancellationToken token = default)        {            return GetAsync(timeout, token).Result;        }        public bool TryGet(out string value, int timeout = -1, CancellationToken token = default)        {            try            {                value = Get(timeout, token);                return true;            }            catch (Exception)            {                value = default;                return false;            }        }        public virtual void Set(string value, int timeout = -1, CancellationToken token = default)        {            SetAsync(value, timeout, token).Wait();        }        public bool TrySet(string value, int timeout = -1, CancellationToken token = default)        {            try            {                Set(value, timeout, token);                return true;            }            catch (Exception)            {                return false;            }        }        public async Task<BaseResult<string>> TryGetAsync(int timeout = -1, CancellationToken token = default)        {            try            {                string result = await GetAsync(timeout, token);                return BaseResult<string>.Success(result);            }            catch (Exception)            {                return BaseResult<string>.Failure();            }        }        public async Task<bool> TrySetAsync(string value, int timeout = -1, CancellationToken token = default)        {            try            {                await SetAsync(value, timeout, token);                return true;            }            catch (Exception)            {                return false;            }        }    }}